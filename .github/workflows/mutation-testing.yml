name: Weekly Mutation Testing

on:
  schedule:
    # Every Monday at 6:00 AM UTC
    - cron: '0 6 * * 1'
  workflow_dispatch:
    inputs:
      target_files:
        description: 'Specific files to mutate (optional, e.g., src/leaderboard/database.py)'
        required: false
        default: ''
      mutation_score_threshold:
        description: 'Minimum acceptable mutation score percentage'
        required: false
        default: '75'

env:
  PYTHON_VERSION: '3.11'

jobs:
  mutation-test:
    runs-on: ubuntu-latest
    timeout-minutes: 120
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-mutation-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-mutation-
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    
    - name: Clean previous mutation artifacts
      run: |
        rm -rf .mutmut-cache/
        rm -rf html/
        rm -f mutmut.log
    
    - name: Run mutation tests
      id: mutation_test
      run: |
        echo "🦠 Starting mutation testing..."
        
        # Set target files if specified
        if [ -n "${{ github.event.inputs.target_files }}" ]; then
          echo "Running mutation tests on specific files: ${{ github.event.inputs.target_files }}"
          python -m mutmut run --paths-to-mutate "${{ github.event.inputs.target_files }}"
        else
          echo "Running mutation tests on all source files"
          python -m mutmut run
        fi
        
        # Generate results summary
        echo "📊 Generating mutation test results..."
        python -m mutmut results > mutation-results.txt
        python -m mutmut html
        
        # Extract mutation score for validation
        MUTATION_SCORE=$(python -c "
import re
with open('mutation-results.txt', 'r') as f:
    content = f.read()
    
# Look for mutation score patterns in the output
# mutmut typically shows results like 'X/Y (Z%)' 
killed_match = re.search(r'🎉 (\d+)', content)
total_match = re.search(r'(\d+)/(\d+)', content)

if killed_match and total_match:
    killed = int(killed_match.group(1))
    total = int(total_match.group(2))
    if total > 0:
        score = (killed / total) * 100
        print(f'{score:.1f}')
    else:
        print('0.0')
else:
    print('0.0')
        ")
        
        echo "MUTATION_SCORE=$MUTATION_SCORE" >> $GITHUB_OUTPUT
        echo "📈 Mutation Score: $MUTATION_SCORE%"
    
    - name: Validate mutation score
      run: |
        THRESHOLD=${{ github.event.inputs.mutation_score_threshold || '75' }}
        SCORE=${{ steps.mutation_test.outputs.MUTATION_SCORE }}
        
        echo "🎯 Checking mutation score: $SCORE% (threshold: $THRESHOLD%)"
        
        if (( $(echo "$SCORE < $THRESHOLD" | bc -l) )); then
          echo "⚠️ Warning: Mutation score $SCORE% is below threshold $THRESHOLD%"
          echo "This indicates potential weaknesses in the test suite quality."
          # Note: We don't fail the job, just warn - mutation testing is for quality insights
        else
          echo "✅ Mutation score $SCORE% meets or exceeds threshold $THRESHOLD%"
        fi
    
    - name: Store mutation results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: mutation-test-results
        path: |
          mutation-results.txt
          html/
          .mutmut-cache/
        retention-days: 30
    
    - name: Create mutation test summary
      if: always()
      run: |
        echo "# 🦠 Mutation Testing Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Date:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
        echo "**Mutation Score:** ${{ steps.mutation_test.outputs.MUTATION_SCORE }}%" >> $GITHUB_STEP_SUMMARY
        echo "**Threshold:** ${{ github.event.inputs.mutation_score_threshold || '75' }}%" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Results Summary" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        cat mutation-results.txt >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## What This Means" >> $GITHUB_STEP_SUMMARY
        echo "- **🎉 Killed mutants**: Your tests successfully caught these code changes" >> $GITHUB_STEP_SUMMARY
        echo "- **🙁 Surviving mutants**: These code changes weren't caught - consider improving tests" >> $GITHUB_STEP_SUMMARY
        echo "- **⏰ Timeout mutants**: Tests took too long - usually not a concern" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "📊 **HTML Report:** Download the artifacts to view detailed mutation analysis" >> $GITHUB_STEP_SUMMARY
    
    - name: Comment on PR (if applicable)
      if: github.event_name == 'workflow_dispatch' && github.event.pull_request
      uses: actions/github-script@v6
      with:
        script: |
          const score = '${{ steps.mutation_test.outputs.MUTATION_SCORE }}';
          const threshold = '${{ github.event.inputs.mutation_score_threshold || '75' }}';
          
          const body = `## 🦠 Mutation Testing Results
          
          **Mutation Score:** ${score}%
          **Threshold:** ${threshold}%
          
          ${parseFloat(score) >= parseFloat(threshold) ? '✅' : '⚠️'} ${parseFloat(score) >= parseFloat(threshold) ? 'Mutation score meets threshold' : 'Mutation score below threshold - consider improving test quality'}
          
          📊 View detailed results in the workflow artifacts.`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: body
          });